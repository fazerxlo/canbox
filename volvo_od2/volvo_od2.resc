using sysbus
$name?="volvo_od2"
mach create $name

# Load the firmware.  Replace "firmware.elf" with your actual compiled ELF file.
# You'll use the same "qemu.bin" that you build for QEMU, but load the ELF file.
machine LoadPlatformDescription @platforms/cpus/stm32f103.repl
machine LoadPlatformDescription @volvo_od2.repl

sysbus LoadELF $ORIGIN/../.pio/build/genericSTM32F103C8/firmware.elf

emulation CreateUartPtyTerminal "term" "/tmp/uart"
connector Connect sysbus.usart1 term


# Create internal CAN hub for routing frames
emulation CreateCANHub "canHub"

# Connect CAN controller to the CAN hub
connector Connect sysbus.can1 canHub

# Create CAN bridge to host, by default it will be named `vcan0`
machine CreateSocketCANBridge "socketcan" "vcan0"

# Connect bridge to the internal network
connector Connect socketcan canHub

start

# (Optional) Add commands to be executed on simulation start.
# Example: print a message to the Renode console
logLevel 3
# logFile $ORIGIN/../logs/my_log.txt
showAnalyzer sysbus.usart1

